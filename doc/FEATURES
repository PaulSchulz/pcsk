Features:

* Ensures clean daemonisation of the spawner process (which then spawns the program), and checks for common error conditions before forking (eg. non-existing/non-executable binary)

* Writes pidfile, and checks the pidfile (running process of itself) to avoid starting a new copy while the old still runs.

* Can chroot() and change uid/gid before starting the program (few programs can do this together; and you're going to have difficulties if you try it with two separate binaries).

* Can log the spawned program's start/termination (including time stamp, exit status and runtime) events.

* Can log the spawned program's stdout and/or stderr, with time stamps.

* Just one more process needed per each daemonised program (the same process does the logging).

* Fine-tunable algorhytm to avoid excess resource utilization (looping) when the program dies too frequently. It can be configured so that it gives up and exits after a given number of unsuccessful tries.

* It can be made running another command before exiting when finally gives up. (eg. send an SMS to the administrator)

* Runs as the given user when root privileges are not needed (this uid can be different than the uid the spawned program runs as).

* The spawned program can signal PCSK that the it should not run any more (let it terminate and exit PCSK itself). (This can be achieved by creating a file with the given name and then exiting.)

* Can be configured to run a program effectively that must not be run more often than n seconds, but needs to be run as often as it is possible. (Starts the program again immediately after it terminated if n seconds elapsed since the last starting.)
